AWSTemplateFormatVersion: '2010-09-09'
Description: 'TruthByte Lambda Functions'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
    Description: Environment name
  ArtifactBucket:
    Type: String
    Description: S3 bucket for Lambda deployment packages

Resources:
  FetchQuestionsFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${Environment}-truthbyte-fetch-questions
      Handler: fetch_questions.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref ArtifactBucket
        S3Key: fetch-questions.zip
      Runtime: python3.13
      Timeout: 30
      MemorySize: 256
      ReservedConcurrentExecutions: 2
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          LOG_LEVEL: INFO
          QUESTIONS_TABLE: !ImportValue !Sub ${Environment}-QuestionsTableName

  SubmitAnswerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${Environment}-truthbyte-submit-answer
      Handler: submit_answers.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref ArtifactBucket
        S3Key: submit-answer.zip
      Runtime: python3.13
      Timeout: 30
      MemorySize: 256
      ReservedConcurrentExecutions: 2
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          LOG_LEVEL: INFO
          ANSWERS_TABLE: !ImportValue !Sub ${Environment}-AnswersTableName
          SESSIONS_TABLE: !ImportValue !Sub ${Environment}-SessionsTableName

  ProposeQuestionFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${Environment}-truthbyte-propose-question
      Handler: propose_question.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref ArtifactBucket
        S3Key: propose-question.zip
      Runtime: python3.13
      Timeout: 30
      MemorySize: 256
      ReservedConcurrentExecutions: 2
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          LOG_LEVEL: INFO
          QUESTIONS_TABLE: !ImportValue !Sub ${Environment}-QuestionsTableName

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !ImportValue !Sub ${Environment}-QuestionsTableArn
                  - !ImportValue !Sub ${Environment}-AnswersTableArn
                  - !ImportValue !Sub ${Environment}-SessionsTableArn
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*

Outputs:
  FetchQuestionsFunctionArn:
    Description: ARN of the fetch questions Lambda function
    Value: !GetAtt FetchQuestionsFunction.Arn
    Export:
      Name: !Sub ${Environment}-FetchQuestionsFunctionArn

  SubmitAnswerFunctionArn:
    Description: ARN of the submit answer Lambda function
    Value: !GetAtt SubmitAnswerFunction.Arn
    Export:
      Name: !Sub ${Environment}-SubmitAnswerFunctionArn

  ProposeQuestionFunctionArn:
    Description: ARN of the propose question Lambda function
    Value: !GetAtt ProposeQuestionFunction.Arn
    Export:
      Name: !Sub ${Environment}-ProposeQuestionFunctionArn 